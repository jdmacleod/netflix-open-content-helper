{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Netflix Open Content Helper \u00b6 A command-line utility for downloading test frames from Netflix Open Content . Prerequisites \u00b6 You will need the AWS CLI installed and available in $PATH to download frame content. No AWS account is needed however, as we use -no-sign-request when downloading files. Quickstart \u00b6 Install using pip or pipx . $ pip install netflix-open-content-helper or $ pipx install netflix-open-content-helper This will provide the command-line utility noc . Using noc with Netflix Open Content \u00b6 Download the first frame of Sparks to the current directory. $ noc download sparks Downloading: sparks frames 1-1 Downloading... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:11 List the available Netflix Open Content Assets with frame content. $ noc list Available content with frames: - chimera : Live action footage, 4K. Download configured for the 23.98fps frame rate version. TIFF files. - cosmoslaundromat : Animated short film done in Blender, 2K 24p. EXR files. - meridian : Live action noir UHD short, 59.94fps. Mastered in Dolby Vision HDR. TIFF files. - sparks : Live action 4K HDR test short, 59.94fps, finished at 4000 nits. ACES EXR files. Open a new web browser window to the Netflix Open Content URL . $ noc browse ... (web browser opens) Examples \u00b6 See examples.md for more examples. Changes \u00b6 See the product Change Log on GitHub for a history of changes. Problems? \u00b6 Please submit issues on GitHub. Want to contribute? \u00b6 Details on the GitHub page: https://github.com/jdmacleod/netflix-open-content-helper .","title":"Home"},{"location":"#netflix-open-content-helper","text":"A command-line utility for downloading test frames from Netflix Open Content .","title":"Netflix Open Content Helper"},{"location":"#prerequisites","text":"You will need the AWS CLI installed and available in $PATH to download frame content. No AWS account is needed however, as we use -no-sign-request when downloading files.","title":"Prerequisites"},{"location":"#quickstart","text":"Install using pip or pipx . $ pip install netflix-open-content-helper or $ pipx install netflix-open-content-helper This will provide the command-line utility noc .","title":"Quickstart"},{"location":"#using-noc-with-netflix-open-content","text":"Download the first frame of Sparks to the current directory. $ noc download sparks Downloading: sparks frames 1-1 Downloading... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:11 List the available Netflix Open Content Assets with frame content. $ noc list Available content with frames: - chimera : Live action footage, 4K. Download configured for the 23.98fps frame rate version. TIFF files. - cosmoslaundromat : Animated short film done in Blender, 2K 24p. EXR files. - meridian : Live action noir UHD short, 59.94fps. Mastered in Dolby Vision HDR. TIFF files. - sparks : Live action 4K HDR test short, 59.94fps, finished at 4000 nits. ACES EXR files. Open a new web browser window to the Netflix Open Content URL . $ noc browse ... (web browser opens)","title":"Using noc with Netflix Open Content"},{"location":"#examples","text":"See examples.md for more examples.","title":"Examples"},{"location":"#changes","text":"See the product Change Log on GitHub for a history of changes.","title":"Changes"},{"location":"#problems","text":"Please submit issues on GitHub.","title":"Problems?"},{"location":"#want-to-contribute","text":"Details on the GitHub page: https://github.com/jdmacleod/netflix-open-content-helper .","title":"Want to contribute?"},{"location":"examples/","text":"Examples \u00b6 Examples of using noc to interact with Netflix Open Content media. Examples Browse List Download Resume or Extend Download Download and Rename Download, Rename, and Renumber Browse \u00b6 Open a web browser to the Netflix Open Content URL. noc browse List \u00b6 List content with frames (default). noc list Output: Available content with frames: - chimera : Live action footage, 4K. Download configured for the 23.98fps frame rate version. TIFF files. - cosmoslaundromat : Animated short film done in Blender, 2K 24p. EXR files. - meridian : Live action noir UHD short, 59.94fps. Mastered in Dolby Vision HDR. TIFF files. - sparks : Live action 4K HDR test short, 59.94fps, finished at 4000 nits. ACES EXR files. List all content (some content does not have frames for download). noc list --no-only-frames Output: Available content: - chimera : Live action footage, 4K. Download configured for the 23.98fps frame rate version. TIFF files. - cosmoslaundromat : Animated short film done in Blender, 2K 24p. EXR files. - elfuente : 4K live action footage. - meridian : Live action noir UHD short, 59.94fps. Mastered in Dolby Vision HDR. TIFF files. - nocturne : Live action test piece at 120fps. Mastered in Dolby Vision HDR and Dolby Atmos. - sollevante : 4K HDR Atmos anime short. - sparks : Live action 4K HDR test short, 59.94fps, finished at 4000 nits. ACES EXR files. Download \u00b6 Download frames 1-5 from Sparks noc download sparks -fs 1 -fe 5 Output: Downloading: sparks frames 1-5 Downloading... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:57 Resume or Extend Download \u00b6 Download frames 1-8 from Sparks noc download sparks -fs 4 -fe 8 Frames that already exist on disk are skipped by default. Use --force to force re-download and overwrite. Output: Downloading: sparks frames 4-8 file SPARKS_ACES_00004.exr exists, skipping. Use --force to overwrite. file SPARKS_ACES_00005.exr exists, skipping. Use --force to overwrite. Downloading... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:34 Download and Rename \u00b6 Download frames 21000-21005 from Meridian and rename as 'meridian.%05d.tif' noc download meridian -fs 21000 -fe 21005 --rename meridian.%05d.tif Output: noc download meridian -fs 21000 -fe 21005 --rename meridian.%05d.tif Downloading: meridian frames 21000-21005 Downloading... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:01:12 Download, Rename, and Renumber \u00b6 Download frames 9911-9963 of Cosmos Laundromat , renaming as COS_002_0045_comp_NFX_v001.%04d.exr, and renumbering to start at frame 1001 rather than 9911. noc download cosmoslaundromat -fs 9911 -fe 9963 --rename COS_002_0045_comp_NFX_v001.%04d.exr --renumber 1001 Output: Downloading: cosmoslaundromat frames 9911-9963 Downloading... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:07:03 This example uses Netflix VFX Shot and Version Naming Recommendations to compose the new name. The example also makes the assumptions that Cosmos Laundromat : is a feature, not an episodic uses scenes, but not sequences the frames represent iteration v001 of VFX comp (composite) work by NFX (Netflix), the vendor. Shot Fields: showID (COS) episode (n/a) seq (not used) scene (002) shotID# (0045) Version Fields: task (comp) vendorID (NFX) version# (v001)","title":"Examples"},{"location":"examples/#examples","text":"Examples of using noc to interact with Netflix Open Content media. Examples Browse List Download Resume or Extend Download Download and Rename Download, Rename, and Renumber","title":"Examples"},{"location":"examples/#browse","text":"Open a web browser to the Netflix Open Content URL. noc browse","title":"Browse"},{"location":"examples/#list","text":"List content with frames (default). noc list Output: Available content with frames: - chimera : Live action footage, 4K. Download configured for the 23.98fps frame rate version. TIFF files. - cosmoslaundromat : Animated short film done in Blender, 2K 24p. EXR files. - meridian : Live action noir UHD short, 59.94fps. Mastered in Dolby Vision HDR. TIFF files. - sparks : Live action 4K HDR test short, 59.94fps, finished at 4000 nits. ACES EXR files. List all content (some content does not have frames for download). noc list --no-only-frames Output: Available content: - chimera : Live action footage, 4K. Download configured for the 23.98fps frame rate version. TIFF files. - cosmoslaundromat : Animated short film done in Blender, 2K 24p. EXR files. - elfuente : 4K live action footage. - meridian : Live action noir UHD short, 59.94fps. Mastered in Dolby Vision HDR. TIFF files. - nocturne : Live action test piece at 120fps. Mastered in Dolby Vision HDR and Dolby Atmos. - sollevante : 4K HDR Atmos anime short. - sparks : Live action 4K HDR test short, 59.94fps, finished at 4000 nits. ACES EXR files.","title":"List"},{"location":"examples/#download","text":"Download frames 1-5 from Sparks noc download sparks -fs 1 -fe 5 Output: Downloading: sparks frames 1-5 Downloading... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:57","title":"Download"},{"location":"examples/#resume-or-extend-download","text":"Download frames 1-8 from Sparks noc download sparks -fs 4 -fe 8 Frames that already exist on disk are skipped by default. Use --force to force re-download and overwrite. Output: Downloading: sparks frames 4-8 file SPARKS_ACES_00004.exr exists, skipping. Use --force to overwrite. file SPARKS_ACES_00005.exr exists, skipping. Use --force to overwrite. Downloading... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:34","title":"Resume or Extend Download"},{"location":"examples/#download-and-rename","text":"Download frames 21000-21005 from Meridian and rename as 'meridian.%05d.tif' noc download meridian -fs 21000 -fe 21005 --rename meridian.%05d.tif Output: noc download meridian -fs 21000 -fe 21005 --rename meridian.%05d.tif Downloading: meridian frames 21000-21005 Downloading... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:01:12","title":"Download and Rename"},{"location":"examples/#download-rename-and-renumber","text":"Download frames 9911-9963 of Cosmos Laundromat , renaming as COS_002_0045_comp_NFX_v001.%04d.exr, and renumbering to start at frame 1001 rather than 9911. noc download cosmoslaundromat -fs 9911 -fe 9963 --rename COS_002_0045_comp_NFX_v001.%04d.exr --renumber 1001 Output: Downloading: cosmoslaundromat frames 9911-9963 Downloading... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:07:03 This example uses Netflix VFX Shot and Version Naming Recommendations to compose the new name. The example also makes the assumptions that Cosmos Laundromat : is a feature, not an episodic uses scenes, but not sequences the frames represent iteration v001 of VFX comp (composite) work by NFX (Netflix), the vendor. Shot Fields: showID (COS) episode (n/a) seq (not used) scene (002) shotID# (0045) Version Fields: task (comp) vendorID (NFX) version# (v001)","title":"Download, Rename, and Renumber"},{"location":"technical/project-organization/","text":"Modern Python Project Template \u00b6 This document describes the standardized structure for Python projects with modern tooling and development practices. Project Structure \u00b6 project-name/ \u251c\u2500\u2500 src/ # Main package directory \u2502 \u2514\u2500\u2500 your_package/ # Replace with your package name \u2502 \u251c\u2500\u2500 __init__.py # Package initialization \u2502 \u2514\u2500\u2500 core/ # Core functionality \u251c\u2500\u2500 tests/ # Test directory \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 conftest.py # Pytest fixtures \u2502 \u2514\u2500\u2500 test_*.py # Test modules \u251c\u2500\u2500 docs/ # Documentation \u2502 \u251c\u2500\u2500 technical/ # Technical documentation \u2502 \u2514\u2500\u2500 user/ # User documentation \u251c\u2500\u2500 scripts/ # Utility scripts and tools \u251c\u2500\u2500 notebooks/ # Jupyter notebooks (if needed) \u251c\u2500\u2500 .env.template # Template for environment variables \u251c\u2500\u2500 .gitignore # Git ignore patterns \u251c\u2500\u2500 .pre-commit-config.yaml # Pre-commit hooks configuration \u251c\u2500\u2500 pyproject.toml # Project configuration and dependencies \u251c\u2500\u2500 README.md # Project documentation \u2514\u2500\u2500 LICENSE # Project license Key Components \u00b6 src Directory \u00b6 The src layout is used for better packaging practices: - Prevents accidental imports of the development package - Ensures testing against installed package - Provides clean separation of package code - Mirrors distribution structure scripts Directory \u00b6 Contains utility scripts and tools Development helper scripts Deployment scripts Data processing utilities Not included in the main package distribution Documentation Structure \u00b6 docs/technical/ : Implementation details, architecture docs/user/ : Usage guides, API documentation README.md: Project overview and quick start Development Tools \u00b6 Type checking: mypy Code formatting: black Import sorting: isort Linting: ruff Security: bandit, safety Pre-commit hooks for automated checks Testing \u00b6 pytest for test running Coverage reporting Fixtures in conftest.py Clear separation of unit and integration tests Best Practices \u00b6 Code Organization \u00b6 Use type hints consistently Follow PEP 8 style guidelines Keep modules focused and single-purpose Document public APIs Environment Management \u00b6 Use virtual environments Manage dependencies with pyproject.toml Use environment variables for configuration Never commit sensitive information Version Control \u00b6 Meaningful commit messages Feature branches for development Pre-commit hooks for quality checks Clear .gitignore rules Documentation \u00b6 Keep README.md updated Document all public APIs Include usage examples Maintain technical documentation Setup Instructions \u00b6 Create new project: bash mkdir project-name cd project-name git init Set up virtual environment: bash uv venv source .venv/bin/activate # On Windows: .venv\\Scripts\\activate Install dependencies: bash uv pip install -e \".[dev]\" Initialize pre-commit: bash pre-commit install Development Workflow \u00b6 Install in development mode Run tests with pytest Use pre-commit hooks Update documentation Regular dependency updates","title":"Modern Python Project Template"},{"location":"technical/project-organization/#modern-python-project-template","text":"This document describes the standardized structure for Python projects with modern tooling and development practices.","title":"Modern Python Project Template"},{"location":"technical/project-organization/#project-structure","text":"project-name/ \u251c\u2500\u2500 src/ # Main package directory \u2502 \u2514\u2500\u2500 your_package/ # Replace with your package name \u2502 \u251c\u2500\u2500 __init__.py # Package initialization \u2502 \u2514\u2500\u2500 core/ # Core functionality \u251c\u2500\u2500 tests/ # Test directory \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 conftest.py # Pytest fixtures \u2502 \u2514\u2500\u2500 test_*.py # Test modules \u251c\u2500\u2500 docs/ # Documentation \u2502 \u251c\u2500\u2500 technical/ # Technical documentation \u2502 \u2514\u2500\u2500 user/ # User documentation \u251c\u2500\u2500 scripts/ # Utility scripts and tools \u251c\u2500\u2500 notebooks/ # Jupyter notebooks (if needed) \u251c\u2500\u2500 .env.template # Template for environment variables \u251c\u2500\u2500 .gitignore # Git ignore patterns \u251c\u2500\u2500 .pre-commit-config.yaml # Pre-commit hooks configuration \u251c\u2500\u2500 pyproject.toml # Project configuration and dependencies \u251c\u2500\u2500 README.md # Project documentation \u2514\u2500\u2500 LICENSE # Project license","title":"Project Structure"},{"location":"technical/project-organization/#key-components","text":"","title":"Key Components"},{"location":"technical/project-organization/#src-directory","text":"The src layout is used for better packaging practices: - Prevents accidental imports of the development package - Ensures testing against installed package - Provides clean separation of package code - Mirrors distribution structure","title":"src Directory"},{"location":"technical/project-organization/#scripts-directory","text":"Contains utility scripts and tools Development helper scripts Deployment scripts Data processing utilities Not included in the main package distribution","title":"scripts Directory"},{"location":"technical/project-organization/#documentation-structure","text":"docs/technical/ : Implementation details, architecture docs/user/ : Usage guides, API documentation README.md: Project overview and quick start","title":"Documentation Structure"},{"location":"technical/project-organization/#development-tools","text":"Type checking: mypy Code formatting: black Import sorting: isort Linting: ruff Security: bandit, safety Pre-commit hooks for automated checks","title":"Development Tools"},{"location":"technical/project-organization/#testing","text":"pytest for test running Coverage reporting Fixtures in conftest.py Clear separation of unit and integration tests","title":"Testing"},{"location":"technical/project-organization/#best-practices","text":"","title":"Best Practices"},{"location":"technical/project-organization/#code-organization","text":"Use type hints consistently Follow PEP 8 style guidelines Keep modules focused and single-purpose Document public APIs","title":"Code Organization"},{"location":"technical/project-organization/#environment-management","text":"Use virtual environments Manage dependencies with pyproject.toml Use environment variables for configuration Never commit sensitive information","title":"Environment Management"},{"location":"technical/project-organization/#version-control","text":"Meaningful commit messages Feature branches for development Pre-commit hooks for quality checks Clear .gitignore rules","title":"Version Control"},{"location":"technical/project-organization/#documentation","text":"Keep README.md updated Document all public APIs Include usage examples Maintain technical documentation","title":"Documentation"},{"location":"technical/project-organization/#setup-instructions","text":"Create new project: bash mkdir project-name cd project-name git init Set up virtual environment: bash uv venv source .venv/bin/activate # On Windows: .venv\\Scripts\\activate Install dependencies: bash uv pip install -e \".[dev]\" Initialize pre-commit: bash pre-commit install","title":"Setup Instructions"},{"location":"technical/project-organization/#development-workflow","text":"Install in development mode Run tests with pytest Use pre-commit hooks Update documentation Regular dependency updates","title":"Development Workflow"}]}